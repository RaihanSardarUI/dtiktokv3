---
// AdBanner.astro - Reusable advertisement component with async loading
export interface Props {
  position?: 'top' | 'middle' | 'bottom' | 'sidebar';
  className?: string;
  lazy?: boolean;
}

const { position = 'middle', className = '', lazy = true } = Astro.props;
const adId = `ad-${Math.random().toString(36).substr(2, 9)}`;
---

<div class={`ad-banner ad-${position} ${className}`}>
  <div class="ad-container">
    <!-- Ad Label for transparency -->
    <div class="ad-label">Advertisement</div>
    
    <!-- Ad Content -->
    <div id={adId} class="ad-content" data-ad-key="5db4e115c9cae4168f6efca75fe17bd9">
      <div class="ad-placeholder">Loading advertisement...</div>
    </div>
  </div>
</div>

<script define:vars={{ adId, lazy }}>
  // Async ad loading function
  async function loadAd(containerId) {
    const container = document.getElementById(containerId);
    if (!container) return;
    
    const key = container.getAttribute('data-ad-key');
    const placeholder = container.querySelector('.ad-placeholder');
    
    try {
      // Set up ad options
      window.atOptions = {
        'key': key,
        'format': 'iframe',
        'height': 250,
        'width': 300,
        'params': {}
      };
      
      // Create and load the ad script asynchronously
      const script = document.createElement('script');
      script.type = 'text/javascript';
      script.async = true;
      script.src = `//cautiouslyanalysecrystal.com/${key}/invoke.js`;
      
      // Handle successful load
      script.onload = () => {
        if (placeholder) {
          placeholder.style.display = 'none';
        }
      };
      
      // Handle errors
      script.onerror = () => {
        if (placeholder) {
          placeholder.textContent = 'Ad failed to load';
          placeholder.style.color = '#666';
        }
      };
      
      // Add to container
      container.appendChild(script);
      
    } catch (error) {
      console.warn('Ad loading failed:', error);
      if (placeholder) {
        placeholder.textContent = 'Ad unavailable';
        placeholder.style.color = '#666';
      }
    }
  }
  
  // Load ad immediately or with intersection observer
  if (lazy && 'IntersectionObserver' in window) {
    // Lazy load when ad comes into view
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          loadAd(adId);
          observer.unobserve(entry.target);
        }
      });
    }, {
      rootMargin: '50px'
    });
    
    const adElement = document.getElementById(adId);
    if (adElement) {
      observer.observe(adElement);
    }
  } else {
    // Load immediately but still async
    setTimeout(() => loadAd(adId), 100);
  }
</script>

<style>
  .ad-banner {
    @apply w-full flex justify-center my-6;
  }
  
  .ad-container {
    @apply flex flex-col items-center space-y-2 p-4 bg-gray-800/50 rounded-lg border border-gray-700;
    max-width: 320px;
  }
  
  .ad-label {
    @apply text-xs text-gray-400 uppercase tracking-wider font-medium;
  }
  
  .ad-content {
    @apply flex justify-center items-center;
    min-height: 250px;
    width: 300px;
    position: relative;
  }
  
  .ad-placeholder {
    @apply text-sm text-gray-500 flex items-center justify-center;
    height: 250px;
    width: 300px;
    position: absolute;
    top: 0;
    left: 0;
  }
  
  /* Position-specific styles */
  .ad-top {
    @apply mt-4 mb-8;
  }
  
  .ad-middle {
    @apply my-8;
  }
  
  .ad-bottom {
    @apply mt-8 mb-4;
  }
  
  .ad-sidebar {
    @apply sticky top-24;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .ad-container {
      max-width: 280px;
    }
    
    .ad-content {
      width: 260px;
      min-height: 200px;
    }
    
    .ad-placeholder {
      width: 260px;
      height: 200px;
    }
  }
  
  /* Loading animation */
  .ad-placeholder {
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }
</style> 